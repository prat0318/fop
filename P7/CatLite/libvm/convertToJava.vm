## ASSIGNMENT 1 Part1##
## Team Members: Akanksha Bansal, Gaurav Nanda, Prateek Aggarwal. ##

#set($MARKER="//----")

## Code to generate the interface state.
${MARKER}Convert.java
import CoreMDELite.HomePath;
import CoreMDELite.SDB;

public class Convert {

## Start Node represents the class for which code is to be produced.
#foreach($startNode in $node_violetS)  
#foreach($endNode in $node_violetS) 
#foreach($transition in $transitionS)
#if (${transition.startsAt} == ${startNode.id} && ${transition.endsAt} == ${endNode.id} && ${transition.type} =="T2M" )
    //T2M
    public static void ${transition.name}(String filename){
        System.out.println("Parsing the violet file and creating prolog file...");
        ${transition.addFile}
        //FSMLite.violetParsers.main.Main.main(args);
        System.out.println("Checking whether the prolog file conforms with the rules..");
        String[] list = {HomePath.homePath + "libpl/discontiguous.pl",
                filename, HomePath.homePath + "libpl/conform.pl", HomePath.homePath + "libpl/state.conform.pl"};
        SDB tmpconform = new SDB("tmpconform", list);
        tmpconform.executeProlog();
        tmpconform.delete();
    }
#end

    //M2M

    //M2T
#if (${transition.startsAt} == ${startNode.id} && ${transition.endsAt} == ${endNode.id} && ${transition.type} =="T2M" )
    public static void ${transition.name}(String filename) {
        Violet result = new Violet(filename );
        System.out.println("Invoking Vm2t to create JAVA files.");
        invokeVm2t(result, HomePath.homePath + "libvm/convertToJava.vm");
        return result;
    }

#end

#end
#end
#end
