## ASSIGNMENT 1 Part1##
## Team Members: Akanksha Bansal, Gaurav Nanda, Prateek Aggarwal. ##

#set($MARKER="//----")

## Code to generate the interface state.
${MARKER}Convert.java
import CoreMDELite.HomePath;
import CoreMDELite.GProlog;

public class Convert {

#foreach($transition in $transitionS)
#set($textModel = "T2M")
#if($textModel == $transition.conversionType)
    //T2M
    public static void ${transition.function}(String filename){
        System.out.println("Parsing the violet file and creating prolog file...");
        ${transition.addFile}(args);
    }
#end

#set($textModel = "M2M")
#if($textModel == $transition.conversionType)
    //M2M
    public static void ${transition.function}(String filename){
        System.out.println("Checking whether the prolog file conforms with the rules..");
        String[] list = {HomePath.homePath + "libpl/discontiguous.pl",
                filename, HomePath.homePath + "libpl/conform.pl", HomePath.homePath + "libpl/${transition.addFile}"};
        SDB tmpconform = new SDB("tmpconform", list);
        tmpconform.executeProlog();
        tmpconform.delete();
    }
#end

#set($textModel = "M2T")
#if($textModel == $transition.conversionType)
    //M2T
    static public Violet ${transition.function}(String filename) {
        Violet result = new Violet(filename);
        result.${transition.function}();
        return result;
    }
#end
#end

#set($MARKER="//----")

## Code to generate the interface state.
${MARKER}Violet.java

import CoreMDELite.GProlog;
import CoreMDELite.HomePath;

public class Violet extends GProlog {

    Violet(String filename){
       super(filename);
    }

    Violet(String filename, String[] array) {
        super(filename, array);
    }

    @Override
    public String fileType() {
        return ".pl";
    }

    @Override
    public String partialFileType() {
        return ".state.violet";
    }
    


#foreach($transition in $transitionS)
#set($textModel = "M2M")
#if($textModel == $transition.conversionType)

    @Override
    public void ${transition.function}(){
        ${transition.function}(HomePath.homePath + "libpl/conform.pl");
    }

    public void ${transition.function}(String conformFile) {
        String[] list = {HomePath.homePath+"libpl/discontiguous.pl",
                fullName ,conformFile,HomePath.homePath + "libpl/${transition.addFile}"};
        SDB tmpconform = new SDB("tmpconform", list);
        tmpconform.executeProlog();
        tmpconform.delete();
    }
#end
    
#set($textModel = "M2T")
#if($textModel == $transition.conversionType)
     public Violet ${transition.function}(String extra) {
        Violet result = new Violet(filename + extra);
        invokeVm2t(result, HomePath.homePath + "libvm/${transition.addFile}");
        return result;
    }

    public Violet ${transition.function}() {
        return ${transition.function}("");
    }
#end    
#end
    
}
