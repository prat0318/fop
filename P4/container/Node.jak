layer container;

SoUrCe RooT root "../root/Node.jak";

abstract class Node$$root {

    String data1;
    int data2, data3;
    Node left, right;

    Node$$root( String d1, int d2, int d3 ) {
        nodeConstructor( d1,d2,d3 );
    }

    void nodeConstructor( String d1, int d2, int d3 ) {
        this.data1 = d1;
        this.data2 = d2;
        this.data3 = d3;
        this.left = null;
        this.right = null;
    }

    protected final String tab = "\t ";
    protected final String comma = ",";

    @Override
    public String toString() {
        return ( data1 + tab + data2 + tab + data3 + tab + extra() );
    }

    public String extra() {
        return "";
    }
}

SoUrCe  debug "../debug/Node.jak";

abstract class Node$$debug extends  Node$$root {
    void nodeConstructor( String d1, int d2, int d3 ) {
        Super( String, int, int ).nodeConstructor( d1, d2, d3 );
        if ( Container.debug ) {
            System.out.println( "new node (" + d1 + comma + d2 + comma + d3 + ")" );
        }
    }
}

SoUrCe  sizeOf "../sizeOf/Node.jak";

abstract class Node$$sizeOf extends  Node$$debug {}

SoUrCe  counter "../counter/Node.jak";

class Node extends  Node$$sizeOf {

    int creation_time;

    void nodeConstructor( String d1, int d2, int d3 ) {
        Super( String, int, int ).nodeConstructor( d1, d2, d3 );
        creation_time = 0;
    }

    public String extra() {
        return super.extra() + creation_time;
    }
}
