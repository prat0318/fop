layer original;

SoUrCe RooT root "../root/Iterator.jak"; abstract class Iterator$$root {

    Container c;
    Node current;
    boolean init;

    Iterator$$root(Container c) {
        this.c = c;
        current = c.getHead();
        init = true;
    }

    Node getNext() {
        if (init) {
            init = false;
        } else {
            current = current.right;
        }
        return current;
    }

    boolean hasNext() {
        if (init && current != null) {
            return true;
        }
        return (current != null && current.right != null);
    }

}

SoUrCe  rootDel "../rootDel/Iterator.jak";  abstract class Iterator$$rootDel extends  Iterator$$root  {

    void delete() {
        Node next = current.right;
        c.delete(current);
        current = next;
        init = true;
    }
}

SoUrCe  debugBasic "../debugBasic/Iterator.jak"; abstract class Iterator$$debugBasic extends  Iterator$$rootDel  {

    Node getNext() {
        Node current = super.getNext();
        if (Container.debug) {
            System.out.println("get next returns " + current);
        }
        return current;
    }
}

SoUrCe  counterBasic "../counterBasic/Iterator.jak";  class Iterator extends  Iterator$$debugBasic  {
 }